const int mod = 1e9 + 7;
const int N = 1e5 + 10;
ll seed, vmax;
int a[N], n, m;
    struct node{
        int l, r;
        mutable ll v;
        node(int l, int r, ll v) : l(l), r(r), v(v){}
        bool operator < (const node& rhs) const{
            return l < rhs.l;
        }
    };
    set<node> ODT;
    ll rnd(){
        ll res = seed;
        seed = (seed * 7 + 13) % mod;
        return res;
    }
    auto split(int pos){//把包含pos的区间[l,r]拆为[l, pos - 1] 和 [pos, r]
        auto it = ODT.lb(node(pos, 0, 0));
        if(it != ODT.end() && it->l == pos) return it;
        -- it;
        int L = it->l, R = it->r;
        ll V = it->v;
        ODT.erase(it);
        ODT.insert(node(L, pos - 1, V));
        return ODT.insert(node(pos, R, V)).fi;//返回区间[pos, r]
    }
    void add(int l, int r, ll v){//把区间[l, r]每个数加上v
        auto itr = split(r + 1), itl = split(l);//把区间[l, r]分离出来(必须是先右后左的顺序)
        for(; itl != itr; itl ++)
            itl->v += v;
    }
    void change(int l, int r, ll v){//把区间[l, r]每个数修改成v
        auto itr = split(r + 1), itl = split(l);//把区间[l, r]分离出来(必须是先右后左的顺序)
        ODT.erase(itl, itr);
        ODT.insert(node(l, r, v));
    }
    ll find(int l, int r, int k){//找到区间[l, r]中第k小元素
        auto itr = split(r + 1), itl = split(l);//把区间[l, r]分离出来(必须是先右后左的顺序)
        vector<pair<ll, int>> arr;
        for(; itl != itr; itl ++)
            arr.eb(itl->v, itl->r - itl->l + 1);
        sort(arr.begin(), arr.end());
        for(auto [v, sz] : arr){
            k -= sz;
            if(k <= 0) return v;
        }
        return -1ll;
    }
    ll qmi(ll a, int b, ll mod){
        ll res = 1;
        while(b){
            if(b & 1) res = res * a % mod;
            b >>= 1;
            a = a * a % mod;
        }
        return res;
    }
    ll get(int l, int r, ll x, ll y){//求区间[l, r] 每个数的x次方模y后的和
        auto itr = split(r + 1), itl = split(l);//把区间[l, r]分离出来(必须是先右后左的顺序)
        ll ans = 0;
        for(; itl != itr; itl ++){
            int sz = itl->r - itl->l + 1;
            ll v = itl->v ;
            ll vm = qmi(v % y, x, y);
            ans = (ans + vm * sz % y) % y;
        }
        return ans;
    }
    int main(){
        ios::sync_with_stdio(false); cin.tie(0);
        int n, m;
        cin >> n >> m >> seed >> vmax;
        _rep(i, 1, n + 1) {
            a[i] = (rnd() % vmax) + 1;
            ODT.insert(node(i, i, a[i]));
        }
        ODT.insert(node(n + 1, n + 1, 0));
        _rep(i, 1, m + 1){
            int op = (rnd() % 4) + 1;
            int l = (rnd() % n) + 1;
            int r = (rnd() % n) + 1;
            int x, y;
            if(l > r) swap(l, r);
            if(op == 3) x = (rnd() % (r - l + 1)) + 1;
            else x = (rnd() % vmax) + 1;
            if(op == 4) y = (rnd() % vmax) + 1;
            if(op == 1) add(l, r, x);
            else if(op == 2) change(l, r, x);
            else if(op == 3) cout << find(l, r, x) << endl;
            else cout << get(l, r, x, y) << endl;
        }
        return 0;
    }
}
