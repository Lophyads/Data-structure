namespace Seg{
    const int N = 1e5 + 7;
    const int mod = 998244353;
    int a[N];
    struct node{
        ll sum, tag;
    }tr[N << 2];
    #define lc (o << 1)
    #define rc (o << 1 | 1)
    int L = 0, R = N;
    ll add(ll x, ll y){
        ll res = (x + y) % mod;
        if(res < 0) res += mod;
        return res;
    }
    ll mul(ll x, ll y){
        return x * y % mod;
    }
    void pushup(int o){
        tr[o].sum = add(tr[lc].sum, tr[rc].sum);
    }
    void build(int o = 1, int l = L, int r = R){
		tr[o].sum = tr[o].tag = 0;
        if(l == r){
			tr[o].sum = a[l];
            tr[o].tag = 1;
            return ;
        }
        int mid = (l + r) >> 1;
        build(lc, l, mid);
        build(rc, mid + 1, r);
        pushup(o);
    }
    void upd(int o, ll v){
        (tr[o].tag *= v) %= mod;
        (tr[o].sum *= v) %= mod;
    }
    void pushdown(int o){
        if(tr[o].tag == 0) return ;
        upd(lc, tr[o].tag);
        upd(rc, tr[o].tag);
        tr[o].tag = 0;
    }
    void update(int s, int e, ll v, int o = 1, int l = L, int r = R){
        if(l >= s && r <= e){
            upd(o, v);
            return;
        }
        int mid = (l + r) >> 1;
        pushdown(o);
        if(s <= mid) update(s, e, v, lc, l, mid);
        if(e > mid) update(s, e, v, rc, mid + 1, r);
        pushup(o);
    }
    ll query(int s, int e, int o = 1, int l = L, int r = R){
        if(l >= s && r <= e) return tr[o].sum;
        int mid = (l + r) >> 1;
        pushdown(o);
        if(e <= mid) return query(s, e, lc, l, mid);
        if(s > mid)  return query(s, e, rc, mid + 1, r);
        return add(query(s, e, lc, l, mid), query(s, e, rc, mid + 1, r));
    }
};
//
struct Seg{
	#define lc (o << 1)
	#define rc (o << 1 | 1)
	int n;
	vector<int> tag;
	vector<ll> sum;
	Seg(int n) : n(n), tag(n << 2), sum(n << 2) {}
	Seg(const vector<int>& a){
		n = a.size();
		tag.resize(n << 2);
		sum.resize(n << 2);
		auto build = [&](auto&& self, int o, int l, int r) -> void{
 			if(l == r){
				sum[o] = a[l];
				return;
			}
			int mid = (l + r) >> 1;
			self(self, lc, l, mid);
			self(self, rc, mid + 1, r);
			pushup(o);
		};
		build(build, 1, 0, n - 1);
	}
	void pushup(int o){
		sum[o] = sum[lc] + sum[rc];
	}
	void upd(int o, int l, int r, int v){
		tag[o] = v;
		sum[o] += (r - l + 1) * v;
	}
	void pushdown(int o, int l, int r){
		if(!tag[o]) return;
		int mid = (l + r) >> 1;
		upd(lc, l, mid, tag[o]);
		upd(rc, mid + 1, r, tag[o]);
		tag[o] = 0;
	}
	void update(int o, int l, int r, int s, int e, int v){
		if(l >= s && r <= e){
			upd(o, l, r, v);
			return;
		}
		pushdown(o, l, r);
		int mid = (l + r) >> 1;
		if(s <= mid) update(lc, l, mid, s, e, v);
		if(e > mid) update(rc, mid + 1, r, s, e, v);
		pushup(o);
	}
	void update(int l, int r, int v){
		update(1, 0, n - 1, l, r, v);
	}
	int query(int o, int l, int r, int pos){
		if(l == r) return sum[o];
		pushdown(o, l, r);
		int mid = (l + r) >> 1;
		if(pos <= mid) return query(lc, l, mid, pos);
		return query(rc, mid + 1, r, pos);
	}
	int query(int o, int l, int r, int s, int e){
		if(l >= s && r <= e) return sum[o];
		int mid = (l + r) >> 1;
		pushdown(o, l, r);
		if(e <= mid) return query(lc, l, mid, s, e);
		if(s > mid) return query(rc, mid + 1, r, s, e);
		return query(lc, l, mid, s, e) + query(rc, mid + 1, r, s, e);
	}
	int query(int l, int r){
		return query(1, 0, n - 1, l, r);
	}
	int query(int x){
		return query(1, 0, n - 1, x);
	}
};
void Pushup(int id){
	sum[id] = sum[id << 1] + sum[id << 1 | 1];
}
void build(int id, int l, int r){
	if(l == r) {
		sum[id] = a[l];
		return;
	}
	int m = (l + r) >> 1;
	build(id << 1, l, m);
	build(id << 1 | 1, m + 1, r);
	Pushup(id);
}
void update(int id, int l, int r, int k, int v){//单点修改
	if(l == k && r == k) {
		sum[id] = v;
		return ;
	}
	int m = (l + r) >> 1;
	if(k <= m) update(id << 1, l, m, k, v);
	else update(id << 1 | 1, m + 1, r, k, v);
	Pushup(id);
}
ll query(int id, int l, int r, int s, int e){//区间查询
	if(s <= l && r <= e) return sum[id];
	int m = (l + r) >> 1;
	if(e <= m) return query(id << 1, l, m, s, e);
	else if(s > m) return query(id << 1 | 1, m + 1, r, s, e);
	else return query(id << 1, l, m, s, m) + query(id << 1 | 1, m + 1, r, m + 1, e);
}
//
PII mi[N << 2];
int a[N];
void Pushup(int id){
	if(mi[LC].fi < mi[RC].fi) mi[id] = mi[LC];
	else if(mi[RC].fi < mi[LC].fi) mi[id] = mi[RC];
	else mi[id] = {mi[LC].fi, mi[LC].se + mi[RC].se};
}
void build(int id, int l, int r){
	if(l == r) {
		mi[id] = {a[l], 1};
		return;
	}
	int m = (l + r) >> 1;
	build(id << 1, l, m);
	build(id << 1 | 1, m + 1, r);
	Pushup(id);
}
void update(int id, int l, int r, int k, int v){//单点修改
	if(l == k && r == k) {
		mi[id] = {v, 1};
		return ;
	}
	int m = (l + r) >> 1;
	if(k <= m) update(id << 1, l, m, k, v);
	else update(id << 1 | 1, m + 1, r, k, v);
	Pushup(id);
}
PII query(int id, int l, int r, int s, int e){//区间查询
	if(s <= l && r <= e) return mi[id];
	int m = (l + r) >> 1;
	if(e <= m) return query(id << 1, l, m, s, e);
	else if(s > m) return query(id << 1 | 1, m + 1, r, s, e);
	PII L = query(LC, l, m, s, m);
	PII R = query(RC, m + 1, r, m + 1, e);
	if(L.fi < R.fi) return L;
	else if(R.fi < L.fi) return R;
	else return {L.fi, L.se + R.se}; 
}
int main(){
	ios::sync_with_stdio(false); cin.tie(0);
	int n, m;
	cin >> n >> m;
	_rep(i, 1, n + 1) cin >> a[i];
	build(1, 1, n);
	while(m --){
		int op, x, y;
		cin >> op >> x >> y;
		x ++;
		if(op == 1)
			update(1, 1, n, x, y);
		else {
			PII ans = query(1, 1, n, x, y);
			cout << ans.fi << " " << ans.se << endl;
		}
	}
	return 0;
} 

//区间修改及区间查询
#include<bits/stdc++.h>
using namespace std;
#define _rep(i, x, y) for(int i = (int)x; i < (int)y; ++i)
#define _dep(i,x,y) for(int i = (int)x; i > (int)y; i--)
#define PII pair<int,int>
#define eb emplace_back
#define pb push_back
#define fi first
#define se second
#define PQ priority_queue
#define lb lower_bound
#define ub upper_bound
#define LC id << 1
#define RC id << 1 | 1
typedef long long ll;
typedef vector<int> VI;
const int mod = 1e9 + 7;
const int KINF = 0x3f3f3f3f;
const int N = 1e5 + 10;
ll tree[N << 2];
ll tag[N << 2];//打lazy标记
ll a[N];
void Pushup(int id){
	tree[id] = tree[LC] + tree[RC];
}
void add(int id, int l, int r, ll v){
	tag[id] += v;
	tree[id] += (r - l + 1) * v;
}
void build(int id, int l, int r){
	if(l == r){
		tree[id] = a[l];
		return ;
	}
	int m = (l + r) >> 1;
	build(LC, l ,m);
	build(RC, m + 1, r);
	Pushup(id);
}
void Pushdown(int id, int l, int r){//下传标记
	if(!tag[id]) return;
	int m = (l + r) >> 1;
	add(LC, l, m, tag[id]);//下传到左子树
	add(RC, m + 1, r, tag[id]);//下传到右子树
	tag[id] = 0;//标记清零
}
void Update(int id, int l, int r, int s, int e, ll v){
	if(s <= l && r <= e){
		add(id, l, r, v);
		return;
	}
	Pushdown(id, l, r);
	int m  = (l + r) >> 1;
	if(s <= m) Update(LC, l, m, s, e, v);
	if(e > m) Update(RC, m + 1, r, s, e, v);
	Pushup(id);
}
ll query(int id, int l, int r, int s, int e){
	if(l >= s && e >= r) return tree[id];
	Pushdown(id, l, r);
	int m = (l + r) >> 1;
	if(e <= m) return query(LC, l, m, s, e);
	else if(s > m) return query(RC, m + 1, r, s, e);
	else return query(LC, l, m, s, m) + query(RC, m + 1, r, m + 1, e);
}
//
namespace Seg{//动态开点线段树 edu36 e
	#define LC(x) tr[x].lc
	#define RC(x) tr[x].rc
	constexpr int L = 1, R = 1e9, minf = -2e9, N = 1.6e7;
	struct tree{
		int lc, rc;
		int sum, tag = minf;
	}tr[N];
	int cnt = 1;
	void add(int o, int l, int r, int x){
		tr[o].sum = (r - l + 1) * x;
		tr[o].tag = x;
	}
	void pushdown(int o, int l, int r){
		if(!LC(o)) LC(o) = ++ cnt;
		if(!RC(o)) RC(o) = ++ cnt;
		if(tr[o].tag != minf){
			int mid = (l + r) >> 1;
			add(LC(o), l, mid, tr[o].tag);
			add(RC(o), mid + 1, r, tr[o].tag);
		}
		tr[o].tag = minf;
	}
	void pushup(int o){
		tr[o].sum = tr[LC(o)].sum + tr[RC(o)].sum;
	}
	void update(int lx, int rx, int x, int o = 1, int l = L, int r = R){
		if(l >= lx && r <= rx){
			add(o, l, r, x);
			return;
		}
		pushdown(o, l, r);
		int mid = (l + r) >> 1;
		if(lx <= mid) update(lx, rx, x, LC(o), l, mid);
		if(rx > mid) update(lx, rx, x, RC(o), mid + 1, r);
		pushup(o);
		return;
	}
	int query(int lx, int rx, int o = 1, int l = L, int r = R){
		if(l >= lx && r <= rx) return tr[o].sum;
		pushdown(o, l, r);
		int mid = (l + r) >> 1;
		if(rx <= mid) return query(lx, rx, LC(o), l, mid);
		if(lx > mid) return query(lx, rx, RC(o), mid + 1, r);
		return  query(lx, rx, LC(o), l, mid) + query(lx, rx, RC(o), mid + 1, r);
	}
};



//
namespace Seg{
    #define LC(x) tr[x].lc
    #define RC(x) tr[x].rc
    #define _mov(x) tr[x].mov_tag
    struct node{
        ll poi[3], tag[3], tag2[3] = {1, 1, 1};// 加法标记与乘法标记
        int lc, rc, mov_tag = 0;
    };
    constexpr static int N = 500e6/sizeof(struct node);// 500MB(尽可能拉满)
    constexpr static int L = 1, R = 1e9;
    constexpr static int mod = 1e9 + 7;
    struct node tr[N];
    ll cnt = 1;
    void pushup(int o){
        _rep(i, 0, 3) tr[o].poi[i] = tr[LC(o)].poi[i] + tr[RC(o)].poi[i] % mod;
    }
    void upd(int o, int l, int r, ll* a, ll* b, int _mv){// 更新信息
        // 数值和标记都先旋转再乘后加
        (_mov(o) += _mv) %= 3;
        if(_mv){
            int k = _mv;
            k %= 3;
            while(k --){// 旋转操作
                swap(tr[o].tag[0], tr[o].tag[1]);
                swap(tr[o].tag[1], tr[o].tag[2]);
                swap(tr[o].tag2[0], tr[o].tag2[1]);
                swap(tr[o].tag2[1], tr[o].tag2[2]);
                swap(tr[o].poi[0], tr[o].poi[1]);
                swap(tr[o].poi[1], tr[o].poi[2]);
            }
        }
        if(b[0] != 1){
            _rep(i, 0, 3) (tr[o].poi[i] *= b[i]) %= mod;
            _rep(i, 0, 3) (tr[o].tag[i] *= b[i]) %= mod;
            _rep(i, 0, 3) {
                if(!tr[o].tag2[i]) tr[o].tag2[i] = b[i];
                else (tr[o].tag2[i] *= b[i]) %= mod;
            }
        }
        if(a[0]){
            _rep(i, 0, 3) (tr[o].poi[i] += (a[i] * (r - l + 1) % mod)) %= mod;
            _rep(i, 0, 3) (tr[o].tag[i] += a[i]) %= mod;
        }   
    }
    void pushdown(int o, int l, int r){
        if(!LC(o)) LC(o) = ++ cnt;
        if(!RC(o)) RC(o) = ++ cnt;// 动态开点
        int mid = (l + r) >> 1;
        // 标记积累到子树
        upd(LC(o), l, mid, tr[o].tag, tr[o].tag2, tr[o].mov_tag);
        upd(RC(o), mid + 1, r, tr[o].tag, tr[o].tag2, tr[o].mov_tag);
        // 该树标记清零
        tr[o].mov_tag = 0;
        _rep(i, 0, 3) tr[o].tag[i] = 0;
        _rep(i, 0, 3) tr[o].tag2[i] = 1;//因为是乘法,所以置为1
        return;
    }
    void add(int lx, int rx, ll* a, int o = 1, int l = L, int r = R){
        if(lx > r || rx < l) return ;
        if(l >= lx && r <= rx){
            ll b[3] = {1, 1, 1};
            upd(o, l, r, a, b, 0);
            return;
        }
        int mid = (l + r) >> 1;
        pushdown(o, l, r);
        add(lx, rx, a, LC(o), l, mid);
        add(lx, rx, a, RC(o), mid + 1, r);
        pushup(o);
        return;
    }
    void mul(int lx, int rx, ll* a, int o = 1, int l = L, int r = R){
        if(lx > r || rx < l) return ;
        if(l >= lx && r <= rx){
            ll b[3] = {0, 0, 0};
            upd(o, l, r, b, a, 0);
            return;
        }
        int mid = (l + r) >> 1;
        pushdown(o, l, r);
        mul(lx, rx, a, LC(o), l, mid);
        mul(lx, rx, a, RC(o), mid + 1, r);
        pushup(o);
        return;
    }
    void rotate(int lx, int rx, int o = 1, int l = L, int r = R){
        if(lx > r || rx < l) return ;
        if(l >= lx && r <= rx){
            ll a[3] = {0, 0, 0};
            ll b[3] = {1, 1, 1};
            upd(o, l, r, a, b, 1);
            return;
        }
        int mid = (l + r) >> 1;
        pushdown(o, l, r);
        rotate(lx, rx, LC(o), l, mid);
        rotate(lx, rx, RC(o), mid + 1, r);
        pushup(o);
        return;
    }
    VL query(int lx, int rx, int o = 1, int l = L, int r = R){
        if(l >= lx && r <= rx) {
            VL res(3, 0);
            _rep(i, 0, 3) res[i] = tr[o].poi[i];
            return res;
        }
        int mid = (l + r) >> 1;
        pushdown(o, l, r);
        VL res(3, 0);
        if(lx <= mid){
            VL tmp = query(lx, rx, LC(o), l, mid);
            _rep(i, 0, 3) res[i] += tmp[i];
        }
        if(rx > mid){
            VL tmp = query(lx, rx, RC(o), mid + 1, r);
            _rep(i, 0, 3) (res[i] += tmp[i]) %= mod;
        }
        return res;
    }
};



// jls线段树
namespace Seg{
	#define lc (o << 1)
	#define rc (o << 1 | 1)
	struct node{
		int tag1, tag2, tag3, tag4;// 最大值的加法标记,非最大值的加法标记,历史最大值的加法标记,非历史最大值的加法标记
		int mx, _mx, se, cnt;// 区间最大值,区间历史最大值,区间次大值,区间最大值个数
		ll sum;
	};
	constexpr static int inf = 2e9 + 10;
	constexpr static int N = (((int)5e5) << 4);
	constexpr int L = 1, R = 5e5 + 10;
	struct node tr[N];
	void pushup(int o){
		tr[o].sum = tr[lc].sum + tr[rc].sum;
		tr[o]._mx = max(tr[lc]._mx, tr[rc]._mx);
		if(tr[lc].mx > tr[rc].mx){
			tr[o].mx = tr[lc].mx;
			tr[o].se = max(tr[lc].se, tr[rc].mx);
			tr[o].cnt = tr[lc].cnt;
		}
		else if(tr[rc].mx > tr[lc].mx){
			tr[o].mx = tr[rc].mx;
			tr[o].se = max(tr[rc].se, tr[lc].mx);
			tr[o].cnt = tr[rc].cnt;
		}
		else{
			tr[o].mx = tr[lc].mx;
			tr[o].se = max(tr[lc].se, tr[rc].se);
			tr[o].cnt = tr[lc].cnt + tr[rc].cnt;
		}
	}
	void upd(int o, int l, int r, int t1, int t2, int t3, int t4){
		tr[o].sum += 1ll * tr[o].cnt * t1 + 1ll * t2 * (r - l + 1 - tr[o].cnt);// 最大值要加的数*最大值个数 + 非最大值要加的数 * 非最大值的个数		
		// 历史最大值及标签的操作都取最值
		// 一定要先更新历史最值标记,再更新值域标记
		tr[o].tag3 = max(tr[o].tag3, tr[o].tag1 + t3);
		tr[o].tag4 = max(tr[o].tag4, tr[o].tag2 + t4);
		tr[o]._mx = max(tr[o]._mx, tr[o].mx + t3);
		tr[o].mx += t1;
		tr[o].tag1 += t1;
		tr[o].tag2 += t2;
		if(tr[o].se != -inf) tr[o].se += t2;	
	}
	void pushdown(int o, int l, int r){
		int mmx = max(tr[lc].mx, tr[rc].mx);
		int mid = (l + r) >> 1;
		if(tr[lc].mx == mmx)// 如果区间最大值在左子树上, 则对左子树加上最大值标记,否则加非最大值标记
			upd(lc, l, mid, tr[o].tag1, tr[o].tag2, tr[o].tag3, tr[o].tag4);
		else upd(lc, l, mid, tr[o].tag2, tr[o].tag2, tr[o].tag4, tr[o].tag4);
		if(tr[rc].mx == mmx)
			upd(rc, mid + 1, r, tr[o].tag1, tr[o].tag2, tr[o].tag3, tr[o].tag4);
		else upd(rc, mid + 1, r, tr[o].tag2, tr[o].tag2, tr[o].tag4, tr[o].tag4);
		tr[o].tag1 = tr[o].tag2 = tr[o].tag3 = tr[o].tag4 = 0;
	}
	void build(int o = 1, int l = L, int r = R){
		tr[o].tag1 = tr[o].tag2 = tr[o].tag3 = tr[o].tag4 = 0;
		if(l == r){
			tr[o].sum = tr[o].mx = tr[o]._mx = a[l];
			tr[o].se = -inf;
			tr[o].cnt = 1;
			return ;
		}
		int mid = (l + r) >> 1;
		build(lc, l, mid);
		build(rc, mid + 1, r);
		pushup(o);
		return;
	}
	void add(int lx, int rx, int k, int o = 1, int l = L, int r = R){
		if(rx < l || lx > r) return ;
		if(l >= lx && r <= rx) {
			upd(o, l, r, k, k, k, k);
			return ;
		}
		int mid = (l + r) >> 1;
		pushdown(o, l, r);
		add(lx, rx, k, lc, l, mid);
		add(lx, rx, k, rc, mid + 1, r);
		pushup(o);
		return ;
	}
	void tomin(int lx, int rx, int k, int o = 1, int l = L, int r = R){// 把区间取min变为对数值的加减
		if(rx < l || lx > r || k >= tr[o].mx) return ;
		if(l >= lx && r <= rx && k > tr[o].se) {
			upd(o, l, r, k - tr[o].mx, 0, k - tr[o].mx, 0);
			return ;
		}
		int mid = (l + r) >> 1;
		pushdown(o, l, r);
		tomin(lx, rx, k, lc, l, mid);
		tomin(lx, rx, k, rc, mid + 1, r);
		pushup(o);
		return ;
	}
	int get_max(int lx, int rx, int o = 1, int l = L, int r = R){
		if(rx < l || lx > r) return -inf;
		if(l >= lx && r <= rx) return tr[o].mx;
		int mid = (l + r) >> 1;
		pushdown(o, l, r);
		return max(get_max(lx, rx, lc, l, mid), get_max(lx, rx, rc, mid + 1, r));
	}
	int get_max2(int lx, int rx, int o = 1, int l = L, int r = R){
		if(rx < l || lx > r) return -inf;
		if(l >= lx && r <= rx) return tr[o]._mx;
		int mid = (l + r) >> 1;
		pushdown(o, l, r);
		return max(get_max2(lx, rx, lc, l, mid), get_max2(lx, rx, rc, mid + 1, r));
	}
	ll query(int lx, int rx, int o = 1, int l = L, int r = R){
		if(rx < l || lx > r) return 0;
		if(l >= lx && r <= rx) return tr[o].sum;
		int mid = (l + r) >> 1;
		pushdown(o, l, r);
		return query(lx, rx, lc, l, mid) + query(lx, rx, rc, mid + 1, r);
	}
	#undef lc
	#undef rc
};
// 二维线段树
constexpr int N = 2e3 + 48; // 卡空间
namespace Seg{
	int D, S, n;
	#define lc (o << 1)
	#define rc (o << 1 | 1)
	struct segy{
		int mx[N], tag[N];
		void update(int s, int e, int v, int o = 1, int l = 0, int r = S){
			mx[o] = max(mx[o], v);
			if(l == s && r == e){ // 区间完全覆盖待修区间才打标记
				tag[o] = max(tag[o], v);
				return ;
			}
			int mid = (l + r) >> 1;
			if(e <= mid) return update(s, e, v, lc, l, mid);
			if(s > mid) return update(s, e, v, rc, mid + 1, r);
			update(s, mid, v, lc, l, mid);
			update(mid + 1, e, v, rc, mid + 1, r);
		}
		int query(int s, int e, int o = 1, int l = 0, int r = S){
			if(s == l && r == e) return mx[o];
			int mid = (l + r) >> 1;
			int ans = tag[o]; // 用标记更新答案
			if(e <= mid) return max(ans, query(s, e, lc, l, mid));
			if(s > mid) return max(ans, query(s, e, rc, mid + 1, r));
			return max({ans, query(s, mid, lc, l, mid), query(mid + 1, e, rc, mid + 1, r)});
		}
	};
	struct segx{
		segy mx[N], tag[N];
		void update(int s, int e, int ll, int rr, int v, int o = 1, int l = 0, int r = D){
			mx[o].update(ll, rr, v);
			if(s == l && e == r){
				tag[o].update(ll, rr, v);
				return ;
			}
			int mid = (l + r) >> 1;
			if(e <= mid) return update(s, e, ll, rr, v, lc, l, mid);
			if(s > mid) return update(s, e, ll, rr, v, rc, mid + 1, r);
			update(s, mid, ll, rr, v, lc, l, mid);
			update(mid + 1, e, ll, rr, v, rc, mid + 1, r);
		}
		int query(int s, int e, int ll, int rr, int o = 1, int l = 0, int r = D){
			if(l == s && e == r) return mx[o].query(ll, rr);
			int mid = (l + r) >> 1;
			int ans = tag[o].query(ll, rr);
			if(e <= mid) return max(ans, query(s, e, ll, rr, lc, l, mid));
			if(s > mid) return max(ans, query(s, e, ll, rr, rc, mid + 1, r));
			return max({ans, query(s, mid, ll, rr, lc, l, mid), query(mid + 1, e, ll, rr, rc, mid + 1, r)});
		}
	}tr;
}
using namespace Seg;