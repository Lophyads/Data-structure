namespace LCT{
	const int maxn = 1e5 + 10;
	int tr[maxn][2], fa[maxn], tag[maxn];
	int sum[maxn], v[maxn], stk[maxn];
	#define get(x) (tr[fa[x]][1] == x)
	#define isroot(x) (tr[fa[x]][0] != x && tr[fa[x]][1] != x)
	
	inline void pushup(int x){ sum[x] = sum[tr[x][0]] ^ sum[tr[x][1]] ^ v[x];}
	inline void pushdown(int x){
		if(tag[x]){
			tag[tr[x][0]] ^= 1, tag[tr[x][1]] ^= 1;
			swap(tr[tr[x][0]][0], tr[tr[x][0]][1]);
			swap(tr[tr[x][1]][0], tr[tr[x][1]][1]);
			tag[x] = 0;
		}
	}
	inline void rotate(int x){
		int y = fa[x], z = fa[y], k = get(x);
		if(!isroot(y)) tr[z][get(y)] = x;
		tr[y][k] = tr[x][!k], fa[tr[x][!k]] = y;
		tr[x][!k] = y, fa[y] = x, fa[x] = z;
		pushup(y), pushup(x);
	}
	inline void update(int x){ 
		if(!isroot(x)) update(fa[x]);
		pushdown(x);
	}
	inline void splay(int x){
		update(x);
		for(int y; y = fa[x], !isroot(x); rotate(x))
			if(!isroot(y)) rotate(get(y) == get(x) ? y : x);
	}
	inline int access(int x){ // 建立从跟到x的实路径, 返回根节点
		int p;
		for(p = 0; x; p = x, x = fa[x]){
			splay(x);
			tr[x][1] = p;
			pushup(x);
		}
		return p;
	}
	inline void makeroot(int x){ // 使x成为原树的根
		x = access(x);
		tag[x] ^= 1;
		swap(tr[x][0], tr[x][1]);
	}
	inline int findroot(int x){ // 查找x所在原树的根
		access(x), splay(x);
		while(tr[x][0]) pushdown(x), x = tr[x][0];
		splay(x);
		return x;
	}
	inline void split(int x, int y){ // 用splay维护x到y的路径
		makeroot(x), access(y);
		splay(y);
	}
	inline void cut(int x, int y){ 
		makeroot(x);
		if(findroot(y) == x && fa[y] == x && !tr[y][0]){
			tr[x][1] = fa[y] = 0;
			pushup(x);
		}
	}
	inline void link(int x, int y){
		makeroot(x);
		splay(x);
		if(findroot(y) != x) fa[x] = y;
	}
}