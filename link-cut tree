namespace LCT{
	using ll = long long;
	const int maxn = 2e5 + 10;
	const int mod = 51061;
	int tr[maxn][2], fa[maxn], sz[maxn], rev[maxn];
	ll sum[maxn], val[maxn], ad[maxn], mul[maxn];
	#define get(x) (tr[fa[x]][1] == x)
	#define isroot(x) (tr[fa[x]][0] != x && tr[fa[x]][1] != x)
	#define lc(x) (tr[x][0])
	#define rc(x) (tr[x][1])
	inline void pushup(int x){ 
		sum[x] = (sum[lc(x)] + sum[rc(x)] + val[x]) % mod;
		sz[x] = sz[lc(x)] + sz[rc(x)] + 1;
	}
	inline void upd(int x, int v1, int v2, int v3){
		if(v1) {
			swap(lc(x), rc(x));
			rev[x] ^= 1;
		}
		if(v2 != 1){
			(mul[x] *= v2) %= mod;
			(ad[x] *= v2) %= mod;
			(sum[x] *= v2) %= mod;
			(val[x] *= v2) %= mod;
		}
		if(v3){
			(ad[x] += v3) %= mod;
			(sum[x] += 1ll * v3 * sz[x]) %= mod;
			(val[x] += v3) %= mod;
		}
	}
	inline void pushdown(int x){
		upd(lc(x), rev[x], mul[x], ad[x]);
		upd(rc(x), rev[x], mul[x], ad[x]);
		rev[x] = 0, mul[x] = 1, ad[x] = 0;
	}
	inline void rotate(int x){
		int y = fa[x], z = fa[y], k = get(x);
		if(!isroot(y)) tr[z][get(y)] = x;
		tr[y][k] = tr[x][!k], fa[tr[x][!k]] = y;
		tr[x][!k] = y, fa[y] = x, fa[x] = z;
		pushup(y), pushup(x);
	}
	inline void update(int x){ 
		if(!isroot(x)) update(fa[x]);
		pushdown(x);
	}
	inline void splay(int x){
		update(x);
		for(int y; y = fa[x], !isroot(x); rotate(x))
			if(!isroot(y)) rotate(get(y) == get(x) ? y : x);
	}
	inline int access(int x){ // 建立从跟到x的实路径, 返回根节点
		int p;
		for(p = 0; x; p = x, x = fa[x]){
			splay(x);
			rc(x) = p;
			pushup(x);
		}
		return p;
	}
	inline void makeroot(int x){ // 使x成为原树的根
		x = access(x);
		rev[x] ^= 1;
		swap(lc(x), rc(x));
	}
	inline int findroot(int x){ // 查找x所在原树的根
		access(x), splay(x);
		while(lc(x)) pushdown(x), x = lc(x);
		splay(x);
		return x;
	}
	inline void split(int x, int y){ // 用splay维护x到y的路径
		makeroot(x), access(y);
		splay(y);
	}
	inline void cut(int x, int y){ 
		makeroot(x);
		if(findroot(y) == x && fa[y] == x && !lc(y)){
			rc(x) = fa[y] = 0;
			pushup(x);
		}
	}
	inline void link(int x, int y){
		makeroot(x);
		splay(x);
		if(findroot(y) != x) fa[x] = y;
	}
}