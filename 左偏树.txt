constexpr int N = 1e5 + 10;
#define lc(x) tr[x].ls
#define rc(x) tr[x].rs
struct node{
	int ls, rs, v, fa, dis;
}tr[N];
int merge(int x, int y){
	if(!x || !y) return x + y;
	if(tr[x].v > tr[y].v || (tr[x].v == tr[y].v && x > y)) swap(x, y);
	rc(x) = merge(rc(x), y);
	if(tr[lc(x)].dis < tr[rc(x)].dis) swap(rc(x), lc(x));
	tr[lc(x)].fa = tr[rc(x)].fa = tr[x].fa = x;
	tr[x].dis = tr[rc(x)].dis + 1;
	return x;
}
int find(int x){
	if(x == tr[x].fa) return x;
	return tr[x].fa = find(tr[x].fa);
}
void pop(int x){
	tr[x].v = -1;
	tr[lc(x)].fa = lc(x), tr[rc(x)].fa = rc(x);
	tr[x].fa = merge(lc(x), rc(x));
}