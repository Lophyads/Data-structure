
namespace Seg{// 洛谷模板题 子序列自动机， edu33 f
	#define lc(x) tr[x].ls
	#define rc(x) tr[x].rs
	struct node{
		int ls, rs, v;
	};
	constexpr static int N = (500e6) / sizeof(struct node);
	constexpr static int L = 1, R = 1e5 + 7;
	struct node tr[N];
	ll cnt = 1;
	void build(int o = 1, int l = L, int r = R){
		tr[o].v = -1;
		if(l == r) return;
		lc(o) = ++ cnt;
		rc(o) = ++ cnt;
		int mid = (l + r) >> 1;
		build(lc(o), l, mid);
		build(rc(o), mid + 1, r);
	}
	int update(int pos, int v, int o, int l = L, int r = R){
		int nw = ++ cnt;
		lc(nw) = lc(o);
		rc(nw) = rc(o);// 把旧子树拷到新子树上
		if(l == r) {
			tr[nw].v = v;
			return nw; 
		}
		int mid = (l + r) >> 1;
		if(pos <= mid) lc(nw) = update(pos, v, lc(nw), l, mid);
		else rc(nw) = update(pos, v, rc(nw), mid + 1, r);
		return nw; 
	}
	int query(int o, int pos, int l = L, int r = R){
		if(l == r) return tr[o].v;
		int mid = (l + r) >> 1;
		if(pos <= mid) return query(lc(o), pos, l, mid);
		return query(rc(o), pos, mid + 1, r);
	}
};

namespace seg{// 求区间众数query(rt[l - 1], rt[r], (r - l + 1) / 2) Codeforces Round #716 (Div. 2)D
	#define lc(x) tr[x].ls
	#define rc(x) tr[x].rs
	struct node{
		int ls, rs, v;
	};
	constexpr static int N = (int)500e6 / sizeof(node);
	struct node tr[N];
	ll cnt = 1;
	int L = 1, R = 3e5 + 7;
	void build(int o = 1, int l = L, int r = R){
		if(l == r) return;
		lc(o) = ++cnt;
		rc(o) = ++cnt;
		int mid = (l + r) >> 1;
		build(lc(o), l, mid);
		build(rc(o), mid + 1, r);
	} 
	int update(int pos, int o, int l = L, int r = R){
		int nw = ++cnt;
		lc(nw) = lc(o);
		rc(nw) = rc(o);
		tr[nw].v = tr[o].v + 1;
		if(l == r) return nw;
		int mid = (l + r) >> 1;
		if(pos <= mid) lc(nw) = update(pos, lc(nw), l, mid);
		else rc(nw) = update(pos, rc(nw), mid + 1, r);
		return nw;
	}
	int query(int s, int e, int k, int l = L, int r = R){
		if(l == r) return tr[e].v - tr[s].v > k ? tr[e].v - tr[s].v : -1;
		int lsum = tr[lc(e)].v - tr[lc(s)].v, rsum = tr[rc(e)].v - tr[rc(s)].v;
		int mid = (l + r) >> 1;
		if(lsum > k) return query(lc(s), lc(e), k, l, mid);
		if(rsum > k) return query(rc(s), rc(e), k, mid + 1, r);
		return -1;
	}
}